@page "/forface/register";

@inject IClientAuth clientAuth;
@inject NavigationManager NavigationManager;
@inject ILanguageService lang;
@inject UserContext user;
@inject ILoggerFactory loggerFactory;

<EditForm Model="@registerModel" OnValidSubmit="@Register" FormName="register-form">
    <DataAnnotationsValidator />

        <div class="form-group">
            <label for="email">@lang.GetPhrase("email")</label>
            <input id="email" class="form-control" type="text" @bind-value="registerModel.Email"></input>
        </div>
        <div class="form-group">
            <label for="email">@lang.GetPhrase("username")</label>
            <input id="email" class="form-control" type="text" @bind-value="registerModel.UserName"></input>
        </div>
        <div class="form-group">
            <label for="password">@lang.GetPhrase("password")</label><br />
            <input id="password" class="form-control" type="text" @bind-value="pass"></input>
        </div>
        <div class="form-group">
            <label for="password">@lang.GetPhrase("reapet-password")</label><br />
            <input id="password" class="form-control" type="text"  @bind-value="pass_reapeat"></input>
        </div>
        <button type="submit" class="btn btn-primary">@lang.GetPhrase("login")</button>
</EditForm>

<button class="btn btn-primary" @onclick="() => dupa()">Dupa</button>

@if (message != null)
{
    <div class="alert alert-danger" role="alert">
        @message
    </div> 
}

@code {
    public RegisterRequest registerModel;
    private string pass;
    private string pass_reapeat;

    private ILogger<RegisterRequest> logger;

    private string message;
    protected override void OnInitialized()
    {
        registerModel = new RegisterRequest();
        logger = loggerFactory.CreateLogger<RegisterRequest>();
    }

    protected void dupa(){
        logger.LogInformation("Dupa");
    }

    protected async Task Register()
    {
        logger.LogInformation(registerModel.ToString());
        logger.LogInformation(pass);
        if (pass != pass_reapeat) {
            message = "Passwords are not the same";
            return;
        }
        registerModel.Password = pass;
        LoginResponse result = await clientAuth.Register(registerModel);
        if (result.Message != null) {
            message = result.Message;
            return;
        }
        user.jwt = result?.Jwt;
        user.UserProfile = result?.user;
    }
}
